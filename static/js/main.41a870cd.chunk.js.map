{"version":3,"sources":["components/Navbar/Navbar.js","components/Instructions/Instructions.js","components/Wrapper/Wrapper.js","components/ImageCard/ImageCard.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","scoreColor","highScoreColor","currentScore","topScore","react_default","a","createElement","className","message","Instructions","Wrapper","children","ImageCard","cardClass","id","src","imgURL","alt","onClick","Footer","href","clickItems","img_url","App","state","clickedStatus","gameOver","wonGame","shuffleArray","imageArray","tempValue","randomIndex","arr","currentIndex","length","Math","floor","random","determineClickStatus","imageId","_this","lostGame","newArr","calculateScore","setState","clickedImage","filter","image","render","components_Navbar_Navbar","components_Instructions_Instructions","components_Wrapper_Wrapper","map","components_ImageCard_ImageCard","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41a870cd.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Navbar.css\"\n\nconst Navbar = props => {\n  let scoreColor\n  let highScoreColor\n  if (!props.currentScore) {\n    scoreColor = \"red-text\"\n  }\n  if (props.currentScore && props.currentScore === props.topScore) {\n    highScoreColor = \"green-text\"\n  }\n  return (\n    <nav className=\"navCustom navbar navbar-light bg-info sticky-top\">\n      <h2 className=\"text-white header-text\">Lion King Click</h2>\n      <h3 className={props.message}>You Won!</h3>\n      <h3>\n        Score:<span className={scoreColor}> {props.currentScore}</span> | Top\n        Score: <span className={highScoreColor}>{props.topScore}</span>\n      </h3>\n    </nav>\n  )\n}\n\nexport default Navbar\n","import React from \"react\";\nimport \"./Instructions.css\";\n\nconst Instructions = props => (\n    \n    <div className=\"card bg-light text-center instructions-div\">\n        <div className=\"card-body\">\n            <h4>Click a Lion King Character below! But be careful, you can't click the same image twice!</h4>\n        </div>\n    </div>    \n);\n\nexport default Instructions;\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => (\r\n<div className=\"wrapper-custom container-fluid\">\r\n    {props.children}\r\n</div>\r\n);\r\n\r\nexport default Wrapper;\r\n\r\n","import React from \"react\";\nimport \"./ImageCard.css\"\n\nconst ImageCard = props => (\n    <div className =\"col-sm-3 col-xs-6 image-card\">\n        <div className={props.cardClass}  id={props.id}>\n            <img className=\"card-img-top img-thumbnail\" src={props.imgURL} alt=\"Card\" onClick={() => {props.onClick(props.id)}}/>\n        </div>\n    </div>\n )\n\n\nexport default ImageCard;","import React from \"react\"\n\nconst Footer = () => (\n  <nav className=\"navbar fixed-bottom navbar-light bg-light \">\n    <a\n      className=\"text-center\"\n      href=\"https://github.com/LiVinson/lion-king-click\"\n    >\n      {\" \"}\n      See the Code!\n    </a>\n  </nav>\n)\n\nexport default Footer\n","import React, { Component } from \"react\"\nimport Navbar from \"./components/Navbar\"\nimport Instructions from \"./components/Instructions\"\nimport Wrapper from \"./components/Wrapper\"\nimport ImageCard from \"./components/ImageCard\"\nimport Footer from \"./components/Footer\"\n\nconst clickItems = [\n  {\n    id: 0,\n    alt: \"hyenas\",\n    img_url: \"./images/hyenas.jpg\"\n  },\n  {\n    id: 1,\n    alt: \"mufasa\",\n    img_url: \"./images/mufasa.jpg\"\n  },\n  {\n    id: 2,\n    alt: \"adult nala\",\n    img_url: \"./images/nala_adult.jpg\"\n  },\n  {\n    id: 3,\n    alt: \"young nala\",\n    img_url: \"./images/nala_young.png\"\n  },\n  {\n    id: 4,\n    alt: \"pumbaa\",\n    img_url: \"./images/pumbaa.png\"\n  },\n  {\n    id: 5,\n    alt: \"rafiki\",\n    img_url: \"./images/rafiki.jpg\"\n  },\n  {\n    id: 6,\n    alt: \"sarabi\",\n    img_url: \"./images/sarabi.png\"\n  },\n  {\n    id: 7,\n    alt: \"scar\",\n    img_url: \"./images/scar.jpeg\"\n  },\n  {\n    id: 8,\n    alt: \"adult simba\",\n    img_url: \"./images/simba_adult.jpg\"\n  },\n  {\n    id: 9,\n    alt: \"young simba\",\n    img_url: \"./images/simba_young.jpeg\"\n  },\n  {\n    id: 10,\n    alt: \"timon\",\n    img_url: \"./images/timon.png\"\n  },\n  {\n    id: 11,\n    alt: \"zazu\",\n    img_url: \"./images/zazu.jpg\"\n  }\n]\n\nclass App extends Component {\n  state = {\n    clickedStatus: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    topScore: 0,\n    gameOver: false,\n    wonGame: false\n  }\n\n  shuffleArray = imageArray => {\n    //Shuffles the image array each time the App is rendered\n    let arr = imageArray\n    let currentIndex = arr.length\n    let tempValue\n    let randomIndex\n\n    while (0 !== currentIndex) {\n      //while there are elements left to shuffle\n\n      randomIndex = Math.floor(Math.random() * currentIndex) //pick a random index from 0 to currentIndex\n      currentIndex--\n\n      //Take the element at the random index, and swap it with the current index using temp as a placeholder\n      tempValue = arr[currentIndex]\n      arr[currentIndex] = arr[randomIndex]\n      arr[randomIndex] = tempValue\n    }\n    return arr //Once all are shuffled, return array\n  }\n\n  determineClickStatus = imageId => {\n    //arrow function allows this to represent the App object instance\n\n    if (this.state.clickedStatus[imageId]) {\n      this.lostGame()\n    } else {\n      //if image not previously clicked, update state at index of image to 1\n      let newArr = this.state.clickedStatus\n      newArr[imageId] = 1\n\n      let currentScore = this.calculateScore(this.state.clickedStatus)\n      let topScore = this.state.topScore\n\n      if (currentScore > topScore) {\n        topScore = currentScore\n      }\n\n      if (currentScore === 12) {\n        //If all images clicked, end the game\n        this.wonGame(newArr, topScore)\n      } else {\n        this.setState({\n          //Continue playing\n          clickedImage: newArr,\n          topScore: topScore,\n          gameOver: false,\n          wonGame: false\n        })\n      }\n    }\n  }\n\n  calculateScore = arr => {\n    //Creates an array based on clicked status, and returns the length to calculate the score.\n    let clickedArr = arr.filter(image => image === 1)\n    return clickedArr.length\n  }\n\n  lostGame = () => {\n    //Add logic to determine if won or loss\n    this.setState({\n      clickedStatus: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      gameOver: true\n    })\n  }\n\n  wonGame = (newArr, topScore) => {\n    this.setState({\n      clickedStatus: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      topScore: topScore,\n      wonGame: true\n    })\n  }\n  render = () => {\n    return (\n      <div>\n        <Navbar\n          currentScore={this.calculateScore(this.state.clickedStatus)}\n          topScore={this.state.topScore}\n          message={this.state.wonGame ? \"\" : \"hide-text\"}\n        />\n        <Instructions />\n        <Wrapper>\n          <div className=\"row\">\n            {this.shuffleArray(clickItems).map(image => (\n              <ImageCard\n                key={image.id}\n                id={image.id}\n                imgURL={image.img_url}\n                onClick={this.determineClickStatus}\n                cardClass={\n                  this.state.gameOver ? \"incorrect red-border card\" : \"card\"\n                }\n              />\n            ))}\n          </div>\n        </Wrapper>\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App\n\n/* PseudoCode \n  //ON load: \n    Navbar with starting score and top score\n    Jumbotron with instructions\n    Wrapper with 12 unique images (4 * 3), displayed in random order\n\n  //On click of image:\n      If image was not previously clicked: \n        - Increment the score\n        - If current score > top score, reset the top score to current score\n        - If score = max score: **\n        - Shuffle the order of 12 images\n        \n      If image was previously clicked:\n        - Shake the images?\n        - Reset current score to 0\n        - Reset all images to not clicked\n        - Shuffle the 12 images\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}